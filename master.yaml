Description: >

  This template deploys a VPC, with a pair of public and private subnets spread 
  across two Availabilty Zones. It deploys an Internet Gateway, with a default 
  route on the public subnets. It deploys a pair of NAT Gateways (one in each AZ), 
  and default routes for them in the private subnets.

  It then deploys a highly available ECS cluster using an AutoScaling Group, with 
  ECS hosts distributed across multiple Availability Zones. 

  Finally, it deploys a pair of example ECS services from containers published in 
  Amazon EC2 Container Registry (Amazon ECR).

  Last Modified: 22nd September 2016
  Author: Paul Maddox <pmaddox@amazon.com>

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  InstanceType:
    Description: Which instance type should we use to build the ECS cluster?
    Type: String
    Default: t2.medium

  ClusterSize:
    Description: How many ECS hosts do you want to initially deploy?
    Type: Number
    Default: 1

  BastionHostAMI:
    Description: Bastion host AMI
    Type: String
    Default: ami-070b208e993b59cea

  RefineryImage:
    Description: Refinery image url
    Type: String

  MonitoringRoleArn:
    Description: Monitoring role arn
    Type: String

  PrometheusRemoteWriteUrl:
    Description: Prometheus remote write url
    Type: String
    Default: https://aps-workspaces.us-east-1.amazonaws.com/workspaces/ws-3c50de28-8b09-45d9-95ed-f3a811696041/api/v1/remote_write



Resources:
  VPC:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/ecs-refarch-cloudformation/infrastructure/vpc.yaml
      Parameters:
        EnvironmentName: !Ref AWS::StackName
        VpcCIDR: 10.180.0.0/16
        PublicSubnet1CIDR: 10.180.8.0/21
        PublicSubnet2CIDR: 10.180.16.0/21
        PrivateSubnet1CIDR: 10.180.24.0/21
        PrivateSubnet2CIDR: 10.180.32.0/21

  SecurityGroups:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://refinery-templates.s3.amazonaws.com/security-groups.yaml 
      Parameters:
        EnvironmentName: !Ref AWS::StackName
        VPC: !GetAtt VPC.Outputs.VPC

  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref BastionHostAMI
      InstanceType: t2.micro
      KeyName: david2
      NetworkInterfaces:
        - SubnetId: !GetAtt VPC.Outputs.PublicSubnet1
          AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: [!GetAtt SecurityGroups.Outputs.BastionHostSecurityGroup]
      Tags:
        - Key: Name
          Value: bastion

 
  PrivateSubnetInterface:
    Type: AWS::EC2::NetworkInterface
    Properties: 
      Description: Private subnet interface to be attached to bastion host
      GroupSet: [!GetAtt SecurityGroups.Outputs.BastionHostSecurityGroup]
      SubnetId: !GetAtt VPC.Outputs.PrivateSubnet1


  NwIfAt:
    Type: AWS::EC2::NetworkInterfaceAttachment
    Properties: 
      DeleteOnTermination: true
      DeviceIndex: "1"
      InstanceId: !Ref BastionHost
      NetworkInterfaceId: !Ref PrivateSubnetInterface

  ALB:
    DependsOn: VPC
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/ecs-refarch-cloudformation/infrastructure/load-balancers.yaml
      Parameters:
        EnvironmentName: !Ref AWS::StackName
        VPC: !GetAtt VPC.Outputs.VPC
        Subnets: !GetAtt VPC.Outputs.PublicSubnets
        SecurityGroup: !GetAtt SecurityGroups.Outputs.LoadBalancerSecurityGroup

  ECS:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://refinery-templates.s3.amazonaws.com/ecs-cluster.yaml
      Parameters:
        EnvironmentName: !Ref AWS::StackName
        InstanceType: !Ref InstanceType
        ClusterSize: !Ref ClusterSize
        VPC: !GetAtt VPC.Outputs.VPC
        SecurityGroup: !GetAtt SecurityGroups.Outputs.ECSHostSecurityGroup
        Subnets: !GetAtt VPC.Outputs.PrivateSubnets

  RefineryService:
    Type: AWS::CloudFormation::Stack
    Properties:
        TemplateURL: https://refinery-templates.s3.amazonaws.com/refinery-service-otel.yaml
        Parameters:
          VPC: !GetAtt VPC.Outputs.VPC
          DesiredCount: 2
          Listener: !GetAtt ALB.Outputs.Listener
          Path: /
          Cluster: !GetAtt ECS.Outputs.Cluster
          Subnets: !GetAtt VPC.Outputs.PrivateSubnets
          LoadBalancerSecurityGroup: !GetAtt SecurityGroups.Outputs.LoadBalancerSecurityGroup
          ECSServiceAutoScalingRoleARN: !GetAtt ECS.Outputs.ECSServiceAutoScalingRole
          PrometheusRemoteWriteUrl: !Ref PrometheusRemoteWriteUrl
          MonitoringRoleArn: !Ref MonitoringRoleArn
          RefineryImage: !Ref RefineryImage

  LifecycleHook:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://refinery-templates.s3.amazonaws.com/lifecyclehook.yaml
      Parameters:
        Cluster: !GetAtt ECS.Outputs.Cluster
        ECSAutoScalingGroupName: !GetAtt ECS.Outputs.ECSAutoScalingGroupName

Outputs:

  RefineryServiceUrl:
    Description: The URL endpoint for the website service
    Value: !Join ["", [!GetAtt ALB.Outputs.LoadBalancerUrl, "/"]]