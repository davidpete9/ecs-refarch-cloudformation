Description: >
  Refinery backend service

Parameters:
  VPC:
    Description: The VPC that the ECS cluster is deployed to
    Type: AWS::EC2::VPC::Id

  Cluster:
    Description: Please provide the ECS Cluster ID that this service should run on
    Type: String

  DesiredCount:
    Description: How many instances of this task should we run across our cluster?
    Type: Number
    Default: 1

  Listener:
    Description: The Application Load Balancer listener to register with
    Type: String

  Path:
    Description: The path to register with the Application Load Balancer
    Type: String
    Default: /

  MaxCount:
    Description: Maximum number of instances of this task we can run across our cluster
    Type: Number
    Default: 3

  ECSServiceAutoScalingRoleARN:
    Description: The ECS service auto scaling role ARN
    Type: String

  Subnets:
    Description: Choose which subnets this ECS cluster should be deployed to
    Type: List<AWS::EC2::Subnet::Id>

  LoadBalancerSecurityGroup:
    Description: Load balancer SG ID.
    Type: AWS::EC2::SecurityGroup::Id

Resources:

  # Define who can reach our tasks
  TaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Access to task containers.
      SecurityGroupIngress:
        # Allow access from ELB only
        - SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          IpProtocol: -1
      Tags:
        - Key: Name
          Value: refinery-task-sg


  Service:
    Type: AWS::ECS::Service
    DependsOn: ListenerRule
    Properties:
      Cluster: !Ref Cluster #Role: !Ref ServiceRole
      DesiredCount: !Ref DesiredCount
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref Subnets
          SecurityGroups:
            - !Ref TaskSecurityGroup
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: "refinery-service"
          ContainerPort: 1312
          TargetGroupArn: !Ref TargetGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: refinery
      TaskRoleArn: "arn:aws:iam::336744566914:role/taskdef-montoring"
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: aws-otel-collector
          Image: public.ecr.aws/aws-observability/aws-otel-collector:v0.21.1
          Memory: 300
          Cpu: 50
          Links: []
          PortMappings:
          - ContainerPort: 2000
            Protocol: udp
          - ContainerPort: 4317
            Protocol: tcp
          - ContainerPort: 8125
            Protocol: udp
          Essential: true
          EntryPoint: []
          Command:
          - "--config=/etc/ecs/ecs-amp-xray.yaml"
          Environment:
          - Name: AWS_PROMETHEUS_ENDPOINT
            Value: https://aps-workspaces.us-east-1.amazonaws.com/workspaces/ws-3c50de28-8b09-45d9-95ed-f3a811696041/api/v1/remote_write
          EnvironmentFiles: []
          MountPoints: []
          VolumesFrom: []
          Secrets: []
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: 'true'
              awslogs-group: "/ecs/ecs-aws-otel-sidecar-collector"
              awslogs-region: us-east-1
              awslogs-stream-prefix: ecs
          SystemControls: []
        - Name: refinery-service
          Essential: true
          Image: '336744566914.dkr.ecr.us-east-1.amazonaws.com/refinery:latest'
          PortMappings:
            - ContainerPort: 1312
              Protocol: tcp
          MountPoints: []
          VolumesFrom: []
          Memory: 200
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 365

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 1312
      Protocol: HTTP
      TargetType: ip
      Matcher:
        HttpCode: 200-405
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref Listener
      Priority: 2
      Conditions:
        - Field: path-pattern
          Values:
            - !Ref Path
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  # This IAM Role grants the service access to register/unregister with the
  # Application Load Balancer (ALB). It is based on the default documented here:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
  #ServiceRole:
  #  Type: AWS::IAM::Role
  #  Properties:
  #    RoleName: !Sub ecs-service-${AWS::StackName}
  #    Path: /
  #    AssumeRolePolicyDocument: |
  #      {
  #          "Statement": [{
  #              "Effect": "Allow",
  #              "Principal": { "Service": [ "ecs.amazonaws.com" ]},
  #              "Action": [ "sts:AssumeRole" ]
  #          }]
  #      }
  #    Policies:
  #      - PolicyName: !Sub ecs-service-${AWS::StackName}
  #        PolicyDocument:
  #          {
  #            "Version": "2012-10-17",
  #            "Statement":
  #              [
  #                {
  #                  "Effect": "Allow",
  #                  "Action":
  #                    [
  #                      "ec2:AuthorizeSecurityGroupIngress",
  #                      "ec2:Describe*",
  #                      "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
  #                      "elasticloadbalancing:Describe*",
  #                      "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
  #                      "elasticloadbalancing:DeregisterTargets",
  #                      "elasticloadbalancing:DescribeTargetGroups",
  #                      "elasticloadbalancing:DescribeTargetHealth",
  #                      "elasticloadbalancing:RegisterTargets"
  #                    ],
  #                  "Resource": "*"
  #                }
  #              ]
  #          }

  ServiceScalableTarget:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    Properties:
      MaxCapacity: !Ref MaxCount
      MinCapacity: !Ref DesiredCount
      ResourceId: !Join
        - /
        - - service
          - !Ref Cluster
          - !GetAtt Service.Name
      RoleARN: !Ref ECSServiceAutoScalingRoleARN
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ServiceScaleOutPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: ServiceScaleOutPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 1800
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 1

  ServiceScaleInPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: ServiceScaleInPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 1800
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -1

  CPUScaleOutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CPU utilization greater than 90%
      AlarmDescription: Alarm if cpu utilization greater than 90% of reserved cpu
      Namespace: AWS/ECS
      MetricName: CPUUtilization
      Dimensions:
        - Name: ClusterName
          Value: !Ref Cluster
        - Name: ServiceName
          Value: !GetAtt Service.Name
      Statistic: Maximum
      Period: "60"
      EvaluationPeriods: "3"
      Threshold: "90"
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref ServiceScaleOutPolicy

  CPUScaleInAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CPU utilization less than 70%
      AlarmDescription: Alarm if cpu utilization greater than 70% of reserved cpu
      Namespace: AWS/ECS
      MetricName: CPUUtilization
      Dimensions:
        - Name: ClusterName
          Value: !Ref Cluster
        - Name: ServiceName
          Value: !GetAtt Service.Name
      Statistic: Maximum
      Period: "60"
      EvaluationPeriods: "10"
      Threshold: "70"
      ComparisonOperator: LessThanThreshold
      AlarmActions:
        - !Ref ServiceScaleInPolicy


